#!/usr/bin/env ruby

require 'bundler/setup'
require 'metrics_collector'
require_relative '../lib/metrics_collector/helper'
require_relative '../lib/metrics_collector/resolver.rb'
require 'optionparser'
require 'optparse'
require 'ostruct'

class OptparseMetrics
  def self.parse(args)
    options = OpenStruct.new
    options.library = []
    options.inplace = false
    options.encoding = "utf8"
    options.transfer_type = :auto
    options.verbose = false

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Available output formats: csv, json, console.\nAvailable libraries for metrics: cloc, brakeman, simplecov, rubycritic"

      opts.separator ""
      opts.separator "Specific options:"

      opts.on("-o", "--outputs x,y,z", Array, "List of outputs for metrics") do |outputs|
        raise 'One of the requested outputs is not supported' if (outputs.map(&:downcase) - ['csv', 'json', 'console']).any?

        options.outputs = outputs.map(&:downcase)
      end

      opts.on("-l", "--libraries x,y,z", Array, "List of libraries.") do |libraries|
        raise 'One of the requested libraries is not supported' if (libraries.map(&:downcase) - ['cloc', 'brakeman', 'simplecov', 'rubycritic']).any?

        options.libraries = libraries.map(&:downcase)
      end

      opts.on("-sl", "--slack x,y,z", Array, "Sends outputs to slack. Pass User OAuth Token for slack API and channel id(s).\nPass params in the next order: token,chanel,[channel]") do |slack|
        raise 'Wrong arguments passed. Check --help for details' unless slack.any? && slack.size >= 2

        options.token    = slack[0]
        options.channels = slack[1..-1]
      end

      opts.on("-sp", "--spreadsheet x,y,z", Array, "Send metrics to google spreadsheet document.") do |spreadsheet|
        options.spreadsheet          = spreadsheet[0]
        options.google_client_secret = Hash[*spreadsheet[1..-1]]
      end

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        options.verbose = v
      end

      opts.separator ""
      opts.separator "Common options:"

      opts.on_tail("-h", "--help", "Show available commands") do
        puts opts
        exit
      end

      opts.on_tail("--version", "Show version") do
        puts ::Version.join('.')
        exit
      end
    end

    opt_parser.parse!(args)
    options
  end
end

options = OptparseMetrics.parse(ARGV)

Resolver.new(options.libraries,
             options.outputs,
             options.channels,
             options.token,
             options.spreadsheet,
             options.google_client_secret
            ).call
